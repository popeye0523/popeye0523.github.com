---
layout: post
title: "我的程序员练级之路"
date: 2013-04-06
description: ""
category: blog
tags: [程序员, 修炼]
---
月光博客[1]6月12日翻译了一篇《 "写给新手程序员的一封信":http://www.williamlong.info/archives/2700.html 》，如果说这个是偏向理论性的，那么还有一个由此引发的更具操作性的一篇文章，来自酷壳[2]的《 "程序员技术练级攻略":http://coolshell.cn/articles/4990.html 》。两篇文章都写得非常好，也比较贴合实际，正好我在带六个学生，于是也总结一下跟我自己有关的一些东西，写一个“我的练级之路”，希望有所帮助。

h2. 目前为止我的经历

我从学生到现在做项目经理，经历的东西很多，接触的技术也很多，杂乱无章的东西里，希望能给六位年轻同事带来一些启发。

h3. 2009年之前 大学

p. 每年参与评选优良学风班、优秀班级体、优秀团支部，每次都是好几轮的评比，为了胜出，我们一遍一遍的改演讲稿，一版又一版的做PPT[3]，甚至不用PPT而去做复杂费力的photoshop+flash，这些经历让我练就了迅速的写作、准确的遣词造句、熟练的PPT制作、了解了PS和Flash等工具。虽然工作简历里面没有写“熟练使用Office等办公软件”这句话，却被领导和同事们看中，成了他们口中戏称的“专业御用PPT制作人”，PS也用来帮许多同事救过急。

p. 软件工程专业，嵌入式方向，主要学习内容包括ARM7、ARM9、瑞萨、51等单片机的开发，以及linux、μC/OS[4]等操作系统，linux源码级内核裁剪，期间编程语言以C语言为主，毕业设计花了三个月用protel99画了两个电路图，并且印出电路板来，在网上淘硬件把它焊了出来，遗憾的是代码没有时间写了。我自己的感受是，硬件的知识，哪怕怎么看都不会有用处的38转换器，放大电路，都会让你对计算机和程序的原理更加的了解。

p. 想法：硬件级别的东西，每个管脚每个端口的不同信号以及组合，就像一个配置文件一样，指挥完成不同的功能；linux内核做的模块性极强，才有可能实现功能的裁剪。所以我当时这样想：如果我们的程序也可以做得到这样*高内聚低耦合的模块化*，再加上像管脚一样*灵活的配置*，那么……

h3. 2009年 外企实习
 
  期间主要接触的东西：
  
  # 装win server2003网关服务器，搭建ftp和exchange服务器，配置网络打印机，看似不起眼的工作，却是当时其他做文字处理等工作的Interns眼红的“技术活”，之所以交给了我，原因很简单，是我主动去要来的，所以说，不管什么情况下，自己的主动性才是机会的最大争取者。
  # PHP语言，smarty模版，SNS相关内容，做了一个LMAP[5]框架上的SNS项目。
  # C#语言，windows mobile开发，在smart phone和pocket pc平台上做了一个客户端的小DEMO。
  # ASP，写了几个页面而已，也是因为这么不起眼的几个页面，让我在后面接触到ASP.net的时候，能够发现ASP.net是多么的强大。
  # 感谢我的team lead，Alan，教了一些头脑风暴[6]、 *思维导图* 之类的我一直很受用的东西。思维导图是个好工具，无论是记忆、记录、学习、思考、企划、分析都很好用，能够将知识等内容形成一个清晰直观的结构图，从中心发散出去，让右半脑也活动起来。直到现在，我读书或者汇报，都会从思维导图做起，到思维导图结束。
  # 感谢另一个team lead，Joe，他教了我一些基础的负载均衡[7]的知识和一些学习方法，从此我再也没看过什么《XX天学通XX》类的教程，开始看API或者类似《xxx in action》、《Thinking in XXX》的书。

h3. 2010年 第二学位

p. 用java写程序帮导师Alicia实现了多语平行语料库的解析和建立，导师很给力，把我放在了那篇被EI收录的论文的第三作者。

p. 在以后的一段很长的时间，我们还在不断探讨着关于LingTreeConstructor[8]、EMdros[9]等语料和软件相结合的东西，以及超大XML（几百M甚至几个G）的读取和入库，由于太大不能一次性load到内存中，我又自学了一些多线程和缓存技术，使原本十几分钟处理一次的程序缩减到3秒内。

h3. 2010年7月-2013年 工作

p. 职业生涯的第一站，期间主要接触的东西：
  # LBTS系统，C#开发，使用Oracle数据库，跟以前用的Sqlite、MySql相比，牛X到不行的Oracle所使用的PL/SQL语言让我瞬间着迷，Oracle Concepts[10]的设计思想也被我盗用了不少在程序里面。借助Dev Express[11]所提供的控件、以及我自己写的控件给系统编写所带来的便利，C#让我前所未有的体验到了编程的快感，码农的春天，是不是？值得一提的是，因为实习有搞过FTP经验的我，在linux上也部署了一个tftpd服务器，作为升级程序的文件源，被项目经理认可，由此可见，随便多学一点点东西，都有可能会有蝴蝶效应。
  # QR code防伪系统，包含了C#客户端、短信猫、ASP.net网站、WinCE手持四个部分。
  # HTLY、RKD、GL三个项目，使用java开发，基于Tapestry[12]+Spring+ibatis+jetty的架构。
  # Kettle[13]数据抽取，建立数据仓库，大学时选修过“工作流”这门课，终于在此有了用武之地。
  
p. 说实话做到现在我有些迷茫，好像什么都会，而什么技术都有优点，也有自己的缺点，有好用的地方，也有各种各样的Bug，很难确定自己的方向，但是我可以确定的两点是：我要在技术上有所作为；无论再让我学习什么新的语言或者框架、技术，我都可以迅速进入状态。

h2. 给自己选择一个发展方向

无论是程序员、设计师、架构师、管理、业务、销售，只要你认为适合，且有条件做，有能力做，就大可不必在乎别人的想法，动手去做就是，不会的去学就是。任何公司，看重的都不是平平庸庸的人，而是 **某一领域的尖端人才** 。

h2. 永远不要纠结于表面上的问题

现在写程序，不需要你把一个基础函数都定义出来，所有的语言都会给你现成的东西，不要在“为什么这个日期转换函数总是得不到正确的结果”这样的问题上钻牛角尖，到处询问和baidu，而要弄明白这个日期转换函数是怎么执行或者实现的， **搞清原理** ，否则，一个月之后，让你写同样的代码，你依然要baidu或者回头扒旧代码。

h2. 多尝试一种新的技术

p. LBTS项目，数据库服务器不在公司机房，所以数据备份是个比较麻烦的事情，我在网上找了一个自动备份并压缩成rar的bat脚本做了一些修改，挂到服务器上做了一个任务计划，倒也乐得清闲。MOR数据抽取项目，后期由我接手负责，但是由于权限不足以访问服务器，只能自学Python[14]，写了一个自动监控的脚本，这才发现写了很多的windows bat脚本实在是弱到不能解释。《 "程序员技术练级攻略":http://coolshell.cn/articles/4990.html 》里面也提到，至少学习一门脚本语言，可以让你很快开发出能用得上的小程序，从每天复杂的监控操作这样的纯体力劳动中解脱出来，可以有更多的时间去做有意义的事情。

p. 其实自学的东西还挺多，玩过memcache[15]，搭过私有云，写过GreaseMonkey[16]脚本，尝试过HTML5，写过Android小程序……最近对独立博客有些兴趣，花了一周多的业余时间搞了一个jekyll(Ruby)+github+markdown(rdiscount)+pygments的博客，在Godaddy上买了域名，用免费的DNSPod解析，也算是对建站有了一个实际操作上的体验。360上传隐私事件沸沸扬扬，你会不会真的用wireshark[17]去抓个包看一看呢？这是一个怀疑的过程，也是一个学习的动力。你不用火狐的firebug去看一看HTTP协议的头信息，你不会知道现在的网站大多都是keep-alive的long-connection，更不会发现同事在里面偷偷写的“fuck over time working”这样有意思的事情，一切的一切，从行动开始。

p. 有些时候只是为了一时之乐，或者是为了减轻某个负担，但却能让你的整个人发生意想不到的改变，即使只是在开发思想上的提升，也是一件不错的事情。另外，学习的过程，正是一个验证和锻炼自己学习能力的过程，我相信，一个生活在知识爆炸时代的程序员，学习能力是多么重要。一个勤快并且懒惰的程序员才是好程序员，勤快在接触新东西，就像上面说的；懒惰在想方设法减少工作量，比如程序的测试，你可以尝试自动化测试，使用eclipse的CubicTest[18]插件，或者Sikuli[19]这样的工具，在学习的同时你会发现，其实 **枯燥的测试过程也可以搞的跟玩游戏一样** 。

h2. 借助工具提高自己的效率

# "Ditto":http://ditto-cp.sourceforge.net/ 我的开机自启动程序之一，剪贴板增强程序，没什么好说的，确实好用。 "用法":http://xbeta.info/ditto.htm
# "Doit.im":http://doitim.com/cn/ 网页版的任务管理，像 "Remember the milk":http://www.rememberthemilk.com/ 一样，比较好用，支持#！^等符号转义，方便快捷，使时间管理“不费时”
# "Evernote":http://evernote.com/intl/zh-cn/index.php 我的知识库，所有新知识、老知识、记事、录音什么的统统在里面了，偷说一句，我曾记了我自己一些常见bug的checklist作为review用。
# "Everything":http://xbeta.info/everything/index.htm 最快的文件搜索软件，非常小，只是一个单exe文件的程序，下面会介绍一个Total Commander（简称TC），TC的理念是管理好你的文件，而Everything可以跟它相反，以搜索代替管理，你永远都不需要记得你的文件放在哪个目录下面，只要记得片段的文件名即可，另外，支持正则式的特性，让我不再选择其他的东西了。 "用法":http://xbeta.info/everything-search-tool.htm
# "Google Calendar":https://www.google.com/calendar/render 日程的管理，主要是使用其免费的短信通知功能，让我不漏掉任何一个重要的事情，包括球赛。
# "Listary":http://www.listary.com/ 我的开机自启动程序之二，Windows资源管理器增强小工具，谁用谁知道，两大亮点，快速定位，以及 "和资源管理器或者TC之间保存对话框的调用":http://xbeta.info/tc-listary.htm 。 "用法":http://xbeta.info/listary4.htm
# "Notepad++":http://notepad-plus-plus.org/ 或SublimeText，前者真的是个神器，只要你把自己的习惯改成用ant打包你的java，用makefile链接你的C/C++,用JSLint检查你的代码，相信一切都可以用命令来实现，那么所有的java、C、C++、C#、PHP……都可以用Notepad++作为开发IDE。参考《 "Notepad++ Java开发环境配置":http://blog.chinaunix.net/uid-199788-id-99577.html 》、《 "用notepad++打造自己的IDE开发环境":http://blog.csdn.net/cheungmine/article/details/7659964 》、《 "Notepad++配置C++ IDE":http://hi.baidu.com/neulinux/item/939795bea9d117402bebe364 》、《 "Notepad++代码自动完成制作方法":http://www.cnblogs.com/huntbao/archive/2012/02/20/notepad-code-autocomplete.html 》
# "Total Commander":http://xbeta.info/tc/ 有人评论说它是“神器级别的文件资源管理器，优秀到难以用言语去传达”，这还叫我怎么说。 "善用佳软上的中文主页":http://xbeta.info/tc/
# "Xmind":http://www.xmind.net/ 一款非常实用的商业思维导图软件，应用全球最先进的Eclipse RCP 软件架构（搞java的亲们，是不是拿到手感觉这个妹妹曾经见过的样子？），强调软件的可扩展、跨平台、稳定性和性能，致力于使用先进的软件技术帮助用户真正意义上提高生产率。
# "Rescuetime":https://www.rescuetime.com 或者 "Manictime":http://www.manictime.com/ 数据收集软件，它可以记录电脑上各种软件使用所花费的时间以及电脑闲置的时间，Manictime用.net写的，总感觉很占用资源，我这又老又旧的破笔记本吃不消了，所以选择了Rescuetime，还有更多的报表可以订制，美中不足的是只有英文版，好在我是英语专业的。不用不知道，我每天超过3小时的有效工作时间就算是比较多的了……汗，我都在干什么。

h2. 再说两句

p. 如果你把这当成一个故事，或者当成我的履历来看，那么，我写这个的动机是失败的。

p. 如果你对照开头的两个大牛的文章来看我的学习过程，那么，我们都成功了。

h2. 角标注释

fn1. "月光博客":http://www.williamlong.info/archives/2700.html 一个专注于电脑技术、网站架设互联网、搜索引擎行业、Google Earth、Web 2.0等的原创IT科技博客,作者龙威廉(williamlong)。

fn2. "酷壳网(coolshell.cn)":http://coolshell.cn 一个完全依靠个人建立的技术性BLOG,是一个分享技术见闻,知识,趋势的网站。创始人是陈皓。

fn3. PPT PPT是公司内部交流、对外演示的一个重要软件，所以特意抽出来标注了这个地球人都知道的玩意，以显示其重要地位，做好PPT是个技术+艺术活，推荐一个 "PPT教程网":http://www.pptok.com/ 

fn4. "μC/OS":http://micrium.com/ μC/OS是一种基于优先级的抢占式多 任务实时操作系统，包含了实时内核、任务管理、时间管理、任务间通信同步（信号量，邮箱，消息 队列）和内存管理等功能。开源的，其编译后目标文件可控制在几百k量级，极其适合用来学习操作系统原理。

fn5. LAMP Linux+Apache+Mysql+PHP/Perl/Python，一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。随着开源潮流的蓬勃发展，开放源代码的LAMP已经与J2EE和.Net商业软件形成三足鼎立之势，并且该软件开发的项目在软件方面的投资成本较低，因此受到更多的关注。

fn6. 头脑风暴 又称智力激励法，是现代创造学奠基人美国奥斯本提出的，是一种创造能力的集体训练法，从没有约束的会议中尽情的自由思考，结束后才会将记录下来的东西评估，会有创造性思维的结晶，平常所想不到的东西。

fn7. 负载均衡 英文名称为Load Balance，其意思就是将负载（工作任务）进行平衡、分摊到多个操作单元上进行执行。举个简单的例子：10000人访问一个允许1000人同时在线的服务器，速度会非常慢而且服务器压力很大，而让这10000人平均开访问10个这样的服务器，服务器性能得到最大化利用且访问速度也能达到良好。

fn8. "LingTreeConstructor":http://sourceforge.net/projects/ltc/ sf上托管的开源项目，语言树构造函数(LTC)是一个用于绘图lingusitic语法树的工具。用户可以定义自己的节点类,并可以标签也由用户定义的标签,每个节点。

fn9. "EMdros":http://sourceforge.net/projects/emdros/ 一个text数据库可以用来分析/注解(analyzed/annotated)文本.Emdros有自己的强大查询语言用来进行查询,新增,修改,删除操作.

fn10. Oracle Concepts "中文版":http://www.zw1840.com/oracle/translation/concepts/ Oracle思想，Oracle DBA必读，考DBCP什么的也要看看的。

fn11. "Dev Express":http://www.devexpress.com/ "中文网站":http://www.devexpresscn.com/ 其控件不仅功能丰富，应用简便，而且界面华丽，更可方便定制。另外推出的XAF开发框架也很新颖，只需要简单设置，写几个对象就可以完成很丰富的功能，适合简单的MIS系统。

fn12. "Tapestry":http://tapestry.apache.org/  Apache软件基金会的顶级项目之一，Tapestry并不是一种单纯的MVC框架，它更像MVC框架和模板技术的结合，它不仅包含了前端的MVC框架，还包含了一种视图层的模板技术，使用Tapestry完全可以与Servlet/JSP API分离，是一种非常优秀的设计。 通过使用Tapestry，开发者完全不需要使用JSP技术，用户只需要使用Tapestry提供的模板技术即可，Tapestry实现了视图逻辑和业务逻辑的彻底分离。

fn13. "Kettle":http://kettle.pentaho.com/ 一款国外开源的ETL工具，纯java编写，可以在Window、Linux、Unix上运行，绿色无需安装，数据抽取高效稳定。

fn14. "Python":http://www.python.org/ 一种面向对象、直译式计算机程序设计语言，由Guido van Rossum发明。Python语法简捷而清晰，具有丰富和强大的类库。

fn15. memcache 一个高性能的分布式的内存对象缓存系统，通过在 *内存* 里维护一个统一的巨大的hash表，它能够用来存储各种格式的数据，大数据时代的利器，能与其比肩的还有个hadoop。

fn16. GreaseMonkey Firefox 上十分强大的扩展，通过Greasemonkey脚本实现非常多的个性功能，几乎可以对网页进行任意改造。

fn17. "wireshark":http://www.wireshark.org/ Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。

fn18. "CubicTest":http://www.cubictest.org/ 最简单的网页功能自动化测试解决方案之一

fn19. "Sikuli":http://www.sikuli.org/  由MIT的研究人员设计，是一种新颖的图形脚本语言Sikuli，使用者只要对Python语言有基本的了解，不需要去写出一行行代码，而是用屏幕截图的方式，用截出来的图形元素组合出神奇的程序。

